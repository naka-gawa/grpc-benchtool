// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcbench

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BenchServiceClient is the client API for BenchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchServiceClient interface {
	UnaryTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	StreamTest(ctx context.Context, opts ...grpc.CallOption) (BenchService_StreamTestClient, error)
}

type benchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchServiceClient(cc grpc.ClientConnInterface) BenchServiceClient {
	return &benchServiceClient{cc}
}

func (c *benchServiceClient) UnaryTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/grpcbench.BenchService/UnaryTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchServiceClient) StreamTest(ctx context.Context, opts ...grpc.CallOption) (BenchService_StreamTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &BenchService_ServiceDesc.Streams[0], "/grpcbench.BenchService/StreamTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchServiceStreamTestClient{stream}
	return x, nil
}

type BenchService_StreamTestClient interface {
	Send(*TestRequest) error
	CloseAndRecv() (*StreamSummary, error)
	grpc.ClientStream
}

type benchServiceStreamTestClient struct {
	grpc.ClientStream
}

func (x *benchServiceStreamTestClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *benchServiceStreamTestClient) CloseAndRecv() (*StreamSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BenchServiceServer is the server API for BenchService service.
// All implementations must embed UnimplementedBenchServiceServer
// for forward compatibility
type BenchServiceServer interface {
	UnaryTest(context.Context, *TestRequest) (*TestResponse, error)
	StreamTest(BenchService_StreamTestServer) error
	mustEmbedUnimplementedBenchServiceServer()
}

// UnimplementedBenchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBenchServiceServer struct {
}

func (UnimplementedBenchServiceServer) UnaryTest(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryTest not implemented")
}
func (UnimplementedBenchServiceServer) StreamTest(BenchService_StreamTestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTest not implemented")
}
func (UnimplementedBenchServiceServer) mustEmbedUnimplementedBenchServiceServer() {}

// UnsafeBenchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchServiceServer will
// result in compilation errors.
type UnsafeBenchServiceServer interface {
	mustEmbedUnimplementedBenchServiceServer()
}

func RegisterBenchServiceServer(s grpc.ServiceRegistrar, srv BenchServiceServer) {
	s.RegisterService(&BenchService_ServiceDesc, srv)
}

func _BenchService_UnaryTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServiceServer).UnaryTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcbench.BenchService/UnaryTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServiceServer).UnaryTest(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchService_StreamTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BenchServiceServer).StreamTest(&benchServiceStreamTestServer{stream})
}

type BenchService_StreamTestServer interface {
	SendAndClose(*StreamSummary) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type benchServiceStreamTestServer struct {
	grpc.ServerStream
}

func (x *benchServiceStreamTestServer) SendAndClose(m *StreamSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *benchServiceStreamTestServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BenchService_ServiceDesc is the grpc.ServiceDesc for BenchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcbench.BenchService",
	HandlerType: (*BenchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryTest",
			Handler:    _BenchService_UnaryTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTest",
			Handler:       _BenchService_StreamTest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpcbench/grpcbench.proto",
}
